using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CSLab2
{
    class Program
    {
        static void Main(string[] args)
        {
            BinaryNumber a = new BinaryNumber(Console.ReadLine());
            BinaryNumber b = new BinaryNumber(Console.ReadLine());

            var v = a * b;
            v = a /b ;

        }
    }
    class BinaryNumber
    {
        private bool[] number = new bool[64];
        public bool[] Number
        {
            get
            {
                return number;
            }
        }

        public BinaryNumber()
        {
            for (int i = 0; i < number.Length; i++)
            {
                number[i] = false;
            }
        }
        public BinaryNumber(string num_string)
        {
            string temp = "";
            num_string = CheckString(num_string);
            for (int i = 0; i < number.Length; i++)
            {
                temp = num_string.Substring(i, 1);
                if (temp == "1")
                {
                    number[i] = true;
                }
                else
                {
                    number[i] = false;
                }
            }
        }
        public static string CheckString(string num_string)
        {
            if (num_string.Length == 64)
            {
                return num_string;
            }
            else if (num_string.Length > 64)
            {
                return num_string.Substring(num_string.Length - 64);
            }
            else
            {
                while (num_string.Length != 64)
                {
                    num_string = "0" + num_string;
                }
                return num_string;
            }
        }
        public static BinaryNumber Invert(BinaryNumber number)
        {
            BinaryNumber result = new BinaryNumber();
            for (int i = 0; i < number.number.Length; i++)
            {
                if (!number.number[i])
                    result.number[i] = true;
            }
            BinaryNumber temp = new BinaryNumber();
            temp.number[temp.number.Length - 1] = true;
            result = result + temp;
            return result;
        }
        public static BinaryNumber ShiftRigth(BinaryNumber number)
        {
            BinaryNumber result = new BinaryNumber();
            for (int i = 0; i < number.number.Length - 1; i++)
            {
                result.number[i + 1] = number.number[i];
            }
            return result;
        }
        public static BinaryNumber ShiftLeft(BinaryNumber number)
        {
            BinaryNumber result = new BinaryNumber();
            for (int i = 0; i < number.number.Length - 1; i++)
            {
                result.number[i] = number.number[i + 1];
            }
            return result;
        }
          private static bool GreaterEqual(BinaryNumber first_num, int i, BinaryNumber second_num, int j)
        {
            while (!first_num.number[i] && (i != first_num.number.Length - 1))
            {
                i++;
            }
            while (!second_num.number[j] && (j != second_num.number.Length - 1))
            {
                j++;
            }
            if (i == first_num.number.Length - 1 && j == second_num.number.Length - 1)
            {
                if(first_num.number[i] || !second_num.number[j])
                {
                    return true;
                }
                else
                {
                    return false;
                }
            } 
            else if (i < j)
            {
                return true;
            }
            else if (i > j)
            {
                return false;
            }
            else
            {
                i++;
                j++;
                return GreaterEqual(first_num, i, second_num, j);
            }
        }
        private static bool GreaterEqual(BinaryNumber first_num, BinaryNumber second_num)
        {
            return GreaterEqual(first_num, 0, second_num, 0);
        }
        private static bool EqualsZero(BinaryNumber number)
        {
            bool result = true;
            foreach (bool el in number.number)
            {
                if (el) result = false;
            }
            return result;
        }
        public static BinaryNumber operator +(BinaryNumber first_num, BinaryNumber second_num)
        {
            BinaryNumber result = new BinaryNumber();
            bool rest = false;
            for (int i = second_num.number.Length - 1; i >= 0; i--)
            {
                if (second_num.number[i] && first_num.number[i] && rest)
                {
                    result.number[i] = true;
                    rest = true;
                }
                else if ((second_num.number[i] && first_num.number[i]) || (first_num.number[i] && rest) || (second_num.number[i] && rest))
                {
                    result.number[i] = false;
                    rest = true;
                }
                else if (second_num.number[i] || first_num.number[i] || rest)
                {
                    result.number[i] = true;
                    rest = false;
                }
                else
                {
                    result.number[i] = false;
                    rest = false;
                }
            }
            return result;
        }
        public static BinaryNumber operator -(BinaryNumber first_num, BinaryNumber second_num)
        {
            return first_num + BinaryNumber.Invert(second_num);
        }
        public static string operator *(BinaryNumber multiplicand, BinaryNumber multiplier)
        {
            BinaryNumber result = new BinaryNumber();
            BinaryNumber multiplicand_temp = multiplicand;
            BinaryNumber multiplier_temp = multiplier;

            for (int i = multiplier_temp.number.Length - 1; i >= 0; i--)
            {

                if (multiplier_temp.number[i])
                {

                    result = result + multiplicand_temp;
                }
                multiplicand_temp = BinaryNumber.ShiftLeft(multiplicand_temp);

                Console.WriteLine("Register {0}", multiplier_temp.number.Length-i);

                Console.WriteLine("result");

                for (int k = 0; k < 64; k++)
                {
                    if (result.number[k])
                    {
                        Console.Write("1");
                    }
                    else
                        Console.Write("0");
                }
                Console.WriteLine();
                Console.WriteLine("multiplier");
                for (int k = 0; k < 64; k++)
                {
                    if (multiplier_temp.number[k])
                    {
                        Console.Write("1");
                    }
                    else
                        Console.Write("0");
                }
                Console.WriteLine();
                Console.WriteLine("multiplicand");
                for (int k = 0; k < 64; k++)
                {
                    if (multiplicand_temp.number[k])
                    {
                        Console.Write("1");
                    }
                    else
                        Console.Write("0");
                }
                Console.WriteLine();
            }

            string s = null;
            for (int k = 0; k < 64; k++)
            {
                if (result.number[k])
                {
                    s += "1";
                }
                else
                        s += "0";
            }
            return s;
        }
                public static string operator /(BinaryNumber divident, BinaryNumber divisor)
        {
            string s = null;
            int divis = 0;
            int div = 0;




            for (div = 0; !divident.number[div]; div++) ;
            for (divis = 0; !divisor.number[divis]; divis++) ;
            for (int i = divis-div; i > 0; i-- )
            {
                divisor = ShiftLeft(divisor);
            }

            for (int i = divis - div; i>=0; i--)
            {
                if (GreaterEqual(divident, divisor))
                {
                    divident = divident - divisor;
                    s += "1";
                }
                else
                s += "0";

                 Console.WriteLine("Register {0}", -i + 1 + (divis - div));

                Console.WriteLine("divident");

                for (int k = 0; k < 64; k++)
                {
                    if (divident.number[k])
                    {
                        Console.Write("1");
                    }
                    else
                        Console.Write("0");
                }
                Console.WriteLine();
                Console.WriteLine("divisor");
                for (int k = 0; k < 64; k++)
                {
                    if (divisor.number[k])
                    {
                        Console.Write("1");
                    }
                    else
                        Console.Write("0");
                }
                Console.WriteLine();
                Console.WriteLine("result");
                Console.WriteLine(CheckString(s));

                divident = ShiftLeft(divident);
            }

            divident = ShiftRigth(divident);

                    Console.WriteLine("Remainder");
                    for (int k = 0; k < (divis - div); k++)
                    {
                        Console.Write("0");
                    }
                    for (int k = 0; k < 64 - (divis - div); k++)
                    {
                        if (divident.number[k])
                        {
                            Console.Write("1");
                        }
                        else
                            Console.Write("0");
                    }
                    Console.WriteLine();
                    return s;
        }
    }
}
