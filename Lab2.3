using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ComputerSystemsLab2
{
    class Program
    {
        static void Main(string[] args)
        {
                bool[] Conjunction1 = new bool[32];
                bool[] Conjunction2 = new bool[32];
                do
                {
                    Console.WriteLine("Введiть перший доданок в бiнарному виглядi");
                }
                while (!ImputBool(Conjunction1));
                do
                {
                    Console.WriteLine("Введiть другий доданок в бiнарному виглядi");
                }
                while (!ImputBool(Conjunction2));
                additionIEEE754(Conjunction1, Conjunction2);
                OutputBin(Conjunction1);
            Console.ReadKey();
        }
        static bool ImputBool(bool[] ImputedBool)
        {
            bool b = true;
            string Imput = Console.ReadLine();
            char[] ImputElements = Imput.ToCharArray();
            for (int i = 0; i < ImputElements.Length; i++)
            {
                if (ImputElements.Length > 32)
                {
                    b = false;
                    break;
                }
                if (ImputElements[i] == '1')
                {
                        ImputedBool[i] = true;
                }
            }

            return b;
        }
        static bool addition(bool[] num1, bool[] num2, int start1, int start2, int length)
        {
            bool rest = false;
            for (int i = length-1; i >= 0; i--)
            {
                if (num2[start2+i] && num1[start1+i] && rest)
                {
                    num1[start1 + i] = true;
                    rest = true;
                }
                else if ((num2[start2 + i] && num1[start1 + i]) || (num1[start1 + i] && rest) || (num2[start2 + i] && rest))
                {
                    num1[start1 + i] = false;
                    rest = true;
                }
                else if (num2[start2 + i] || num1[start1 + i] || rest)
                {
                    num1[start1 + i] = true;
                    rest = false;
                }
                else
                {
                    num1[start1 + i] = false;
                    rest = false;
                }
            }
            return rest;
        }
        static bool[] additionIEEE754(bool[] num1, bool[] num2)
        {
            if (num1[1] == false && num2[1] == false || num1[1] == true && num2[1] == true)//Якщо числа мають однаковий знак
            {
                int b = IsEqualMoreLess(num1, num2, 1, 1, 8);//визначає співвідношення порядків
                bool[] One = new bool[32];
                One[8] = true;//число з порядком 1
                if (b == 1)//Якщо порядок першого доданку більший за порядок другого, вирівнюємо порядок другого поки порядки обох чисел не стануть однаковими
                {
                    int i = 0;//рахує кількість проходів
                    do
                    {
                        Shift(num2, 9, 23);//Зміщуємо область вправо
                        addition(num2, One, 1, 1, 8);//Збільшуємо порядок на 1
                        if (i == 1)
                        {
                            num2[9] = true;//Додаємо приховану одиницю після першого зміщення
                        }
                    }
                    while (IsEqualMoreLess(num1, num2, 1, 1, 8) != 0);
                }
                if (b == 2)//Якщо порядок другого доданку більший за порядок першого, вирівнюємо порядок першого поки порядки обох чисел не стануть однаковими
                {
                    int i = 0;//рахує кількість проходів

                    i++;
                    Shift(num1, 9, 23);//Зміщуємо область вправо
                    addition(num1, One, 1, 1, 8);//Збільшуємо порядок на 1
                    if (i == 1)
                    {
                        num1[9] = true;//Додаємо приховану одиницю після першого зміщення
                    }
                    while (IsEqualMoreLess(num1, num2, 1, 1, 8) != 0);
                }

                bool c = addition(num1, num2, 9, 9, 23);//Додаємо два числа, дізнаємось, чи відбувся перенос

                if (c && b == 0)//Коли є залишок при додаванні двох чисел та числа однакового порядку
                {
                    Shift(num1, 9, 23);//Зміщуємо область  вправо
                    addition(num1, One, 1, 1, 8);//Збільшуємо порядок на 1
                    num1[9] = true;//Додаємо  одиницю в старший розряд
                }
                if (c == true && b != 0)//Коли є залишок при додаванні двох чисел та числа різного порядку
                {
                    Shift(num1, 9, 23);//Зміщуємо область  вправо
                    addition(num1, One, 1, 1, 8);//Збільшуємо порядок на 1
                }
                if (c != true && b == 0)//Коли нема залишок при додаванні двох чисел та числа однакового порядку
                {
                    Shift(num1, 9, 23);//Зміщуємо область  вправо
                    addition(num1, One, 1, 1, 8);//Збільшуємо порядок на 1
                }
            }
            return num1;
        }
        static void Shift(bool[] Bin, int start, int length)
        {
                for (int i = 0; i < length-1; i++)
                {
                    Bin[start - i + length-1] = Bin[start - i + length -2];
                }
            Bin[start] = false;
        }
        static int IsEqualMoreLess(bool[] Bin1, bool[] Bin2, int start1, int start2, int length)
        {
            int b = -1;
                for (int i = 0; i <length; i++)//перевіряємо чи перше число == друге
                {

                    if (Bin1[start1 + i] == false && Bin2[start2 + i] == true)//  перше число < друге
                    {
                        b = 2;
                        break;
                    }
                    if (Bin2[start2 + i] == false && Bin1[start1 + i] == true)// перше число > друге
                    {
                        b = 1;
                        break;
                    }
                    if (i == length-1)// перше число == друге
                    {
                        b = 0;
                        break;
                    }
                }
            return b;
        }
        static void OutputBin(bool[] Bin)
        {
            for (int i = 0; i < Bin.Length; i++)
            {
                if (Bin[i])
                {
                    Console.Write("1");
                }
                else
                {
                    Console.Write("0");
                }
            }
            Console.WriteLine();
        }
    }
}
